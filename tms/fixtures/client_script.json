[
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "TMS Customer",
  "enabled": 1,
  "modified": "2023-06-27 13:15:50.359798",
  "module": null,
  "name": "tms-customer-set-query",
  "script": "function setDf(frm){\n    if(frm.doc.state == undefined){\n            frm.set_df_property('county', 'read_only', 1)\n            frm.set_df_property('city', 'read_only', 1)\n        }else if(frm.doc.county == undefined){\n            frm.set_df_property('county', 'read_only', 0)\n            frm.set_df_property('city', 'read_only', 1)\n        }else{\n            frm.set_df_property('county', 'read_only', 0)\n            frm.set_df_property('city', 'read_only', 0)\n        }\n}\n\nfunction setOptions(frm){\n    frappe.db.get_list('County', {\n            filters: {\n                province: frm.doc.state\n            },\n            limit: 500,\n            fields: [\"title\"]\n        }).then(counties => {\n            const array = counties.map(e => e.title)\n            set_field_options(\"county\", array)\n            frappe.db.get_list('City', {\n            filters: {\n                county: frm.doc.county\n            },\n            limit: 500,\n            fields: [\"title\"]\n        }).then(counties => {\n            const array = counties.map(e => e.title)\n            set_field_options(\"city\", array)\n        })\n        })\n}\n\n\nfrappe.ui.form.on('TMS Customer', {\n    refresh(frm){\n        console.log(frm)\n        setOptions(frm)\n        setDf(frm)\n    },\n\tstate(frm) {\n\t    set_field_options(\"county\", [])\n\t    frm.set_value('county', null)\n\t    frm.set_value('city', null)\n\t    setOptions(frm)\n// \tfrm.set_query(\"county\", function() {\n//         return {\n//             \"filters\": {\n//                 \"province\": frm.doc.state,\n//             }\n//         };\n//     });\n\t},\n\tcounty(frm) {\n\t    set_field_options(\"city\", [])\n\t    frm.set_value('city', null)\n\t    setOptions(frm)\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Order",
  "enabled": 1,
  "modified": "2023-06-29 21:16:17.584231",
  "module": null,
  "name": "delivery-order-calculate",
  "script": "function calculate_amount(frm){\n    const amountArr = frm.doc.items.map((item, index) => {\n        const sum = item.rate * item.qty\n        frm.doc.items[index].amount = sum\n        return sum\n    })\n    const sum = amountArr.reduce((accumulator, object) => {\n        return accumulator + object;\n    }, 0);\n    frm.doc.grand_total = sum\n    frm.refresh()\n    // console.log(amountArr, sum)\n}\n\nfunction getRate(frm, cdt, cdn){\n    console.log(frm)\n    \n\t    const item = frappe.get_doc('Delivery Order Item', cdn)\n\t    if(!frm.doc.sender_id || !frm.doc.recipient_id || !frm.doc.cash_on){\n\t        item.rate = 0\n\t        calculate_all(frm)\n\t        frm.refresh()\n\t        return\n\t    }\n\t    const filter_options = {\n\t            sender_id: frm.doc?.sender_id || 'this is a random message',\n\t            recipient_id: frm.doc?.recipient_id || 'this is a random message',\n\t            cash_on: frm.doc?.cash_on,\n\t            item: item?.item_code,\n\t            uom: item?.uom\n\t        }\n\t        console.log(filter_options)\n\t    frappe.db.get_list('TMS Price List', {\n\t        filters: filter_options,\n\t        page_length: 1,\n\t        fields: ['rate', 'name']\n\t    }).then(list => {\n\t        if(list[0]?.rate){\n\t            frappe.show_alert('Get Rate !')\n\t        }else{\n\t            frappe.show_alert('No Rate Founded')\n\t        }\n\t        item.rate = list[0]?.rate || 0\n\t        console.log(list[0])\n\t        calculate_all(frm)\n\t        frm.refresh()\n\t    })\n}\n\nfunction calculate_qty(frm){\n    const sum = frm.doc.items.reduce((accumulator, object) => {\n        return accumulator + object.qty;\n    }, 0);\n    frm.doc.grand_total_qty = sum\n    frm.refresh()\n    // console.log(amountArr, sum)\n}\n\nfunction calculate_weight(frm){\n    const amountArr = frm.doc.items.map((item, index) => {\n        const sum = item.weight * item.qty\n        frm.doc.items[index].total_weight = sum\n        return sum\n    })\n    const sum = amountArr.reduce((accumulator, object) => {\n        return accumulator + object;\n    }, 0);\n    frm.doc.grand_total_weight = sum\n    frm.refresh()\n}\n\nfunction calculate_volume(frm){\n    const amountArr = frm.doc.items.map((item, index) => {\n        const sum = item.volume * item.qty\n        frm.doc.items[index].total_volume = sum\n        return sum\n    })\n    const sum = amountArr.reduce((accumulator, object) => {\n        return accumulator + object;\n    }, 0);\n    frm.doc.grand_total_volume = sum\n    frm.refresh()\n}\n\nfunction calculate_all(frm){\n    calculate_qty(frm)\n\tcalculate_amount(frm)\n\tcalculate_weight(frm)\n\tcalculate_volume(frm)\n}\n\nfrappe.ui.form.on('Delivery Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tif(frm.doc.docstatus == 1){\n\t\t    frm.add_custom_button(__('Status'), function(){\n                let d = new frappe.ui.Dialog({\n    title: 'Change Status',\n    fields: [\n        {\n            label: 'Status',\n            fieldname: 'status',\n            fieldtype: 'Select',\n            options: ['Submitted','Completed', 'Failed'],\n            default: frm.doc.status\n        },\n    ],\n    primary_action_label: 'Change',\n    primary_action(values) {\n        frm.set_value({\n    status: values.status\n})\n// frm.refresh()\n// frm.save('Update')\n        d.hide();\n    }\n});\n\nd.show();\n            }, __('Change'));\n\t\t}\n\t},\n\tcash_on(frm){\n\t    frm.doc.items.forEach(item => {\n\t        getRate(frm, 'Delivery Order Item', item.name)\n\t    })\n\t},\n\trecipient_id(frm){\n\t    frm.doc.items.forEach(item => {\n\t        getRate(frm, 'Delivery Order Item', item.name)\n\t    })\n\t},\n\tsender_id(frm){\n\t    frm.doc.items.forEach(item => {\n\t        getRate(frm, 'Delivery Order Item', item.name)\n\t    })\n\t}\n})\n\nfrappe.ui.form.on('Delivery Order Item', {\n\trefresh(frm) {\n\n\t},\n\trate(frm){\n\t    calculate_all(frm)\n\t},\n\tweight(frm){\n\t    calculate_all(frm)\n\t},\n\tqty(frm){\n\t    calculate_all(frm)\n\t},\n\tvolume(frm){\n\t    calculate_all(frm)\n\t},\n\titem_code(frm){\n\t    calculate_all(frm)\n\t},\n\titem_name(frm){\n\t    calculate_all(frm)\n\t},\n\tuom(frm, cdt, cdn){\n\t    getRate(frm, cdt, cdn)\n\t    calculate_all(frm)\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Order",
  "enabled": 1,
  "modified": "2023-07-03 18:24:12.070315",
  "module": null,
  "name": "delivery-order-listview-button",
  "script": "const t = frappe.listview_settings['Delivery Order']\n\nfrappe.listview_settings['Delivery Order'] = {\n    ...t,\n    onload(listview) {\n        listview.page.add_action_item(__('Sending Money'), () => {\n            let selected_docs_no_filter = listview.get_checked_items()\n            console.log(selected_docs_no_filter)\n            let selected_docs = listview.get_checked_items().filter((note) => {\n                const rm = parseFloat(note.grand_total) - parseFloat(note.money_received_amount)\n                if(note.status != 'Draft' && note.status != 'Cancelled' && note.status != 'Completed'){\n                    return true\n                }else{\n                    return false\n                }\n            });\n            const docnames = listview.get_checked_items(true);\n            \n            let d_total = 0\n\n            for (let i = 0; i < selected_docs.length; i++) {\n                console.log(selected_docs[i] )\n                const remaining_mount = parseFloat(selected_docs[i].grand_total) - parseFloat(selected_docs[i].money_received_amount) - parseFloat(selected_docs[i].commission)\n                console.log(remaining_mount, 'remaining')\n                selected_docs[i].received_amount = remaining_mount\n                 selected_docs[i].remaining_amount = remaining_mount\n                 d_total += remaining_mount\n            }\n            \n            const dialog = new frappe.ui.Dialog({\n                title: __(\"Sending Money\"),\n                fields: [\n                    {\n                        fieldname: 'date',\n                        fieldtype: 'Datetime',\n                        in_list_view: 2,\n                        label: 'Date',\n                        default: 'Now',\n                        reqd: true\n                    },\n                    {\n                        label: 'Delivery Order',\n                        fieldname: 'delivery_order',\n                        fieldtype: 'Table',\n                        cannot_add_rows: true,\n                        in_place_edit: false,\n                        data: selected_docs,\n                        fields: [{\n                                fieldname: 'name',\n                                fieldtype: 'Link',\n                                in_list_view: 2,\n                                label: 'Delivery Order',\n                                read_only: true,\n                                options: 'Delivery Order'\n                            },\n                            {\n                                fieldname: 'grand_total',\n                                fieldtype: 'Currency',\n                                in_list_view: 1,\n                                label: 'Grand Total',\n                                read_only: true\n                            },\n                            {\n                                fieldname: 'remaining_amount',\n                                fieldtype: 'Currency',\n                                in_list_view: 1,\n                                label: 'Remaining Amount',\n                                read_only: true\n                            },\n                            {\n                                fieldname: 'received_amount',\n                                fieldtype: 'Currency',\n                                in_list_view: 1,\n                                label: 'Received Amount',\n                        onchange: function(event) {\n                                    let child_table = dialog.get_value('delivery_order');\n                                    let total = 0\n                                    console.log(event, dialog)\n                                    for(let i = 0; i < child_table.length; i++){\n                                        const item_code = child_table[i].item_code\n                                        total += child_table[i].received_amount\n                                    }\n                                    dialog.set_value('payment_total', total)\n\t\t\t                     //  dialog.fields_dict.payment_total = total\n\t\t\t                     //  dialog.fields_dict.payment_total.grid.refresh()\n\t\t                        }\n                            }\n                        ]\n                    },\n                    {\n                        fieldname: 'selected_docs',\n                        fieldtype: 'Int',\n                        in_list_view: 2,\n                        label: 'Selected Docs',\n                        default: selected_docs_no_filter.length,\n                        read_only: true\n                    },\n                    {\n                        fieldname: 'sending_docs',\n                        fieldtype: 'Int',\n                        in_list_view: 2,\n                        label: 'Sending Docs',\n                        default: selected_docs.length,\n                        read_only: true\n                    },\n                    {\n                        fieldname: 'payment_total',\n                        fieldtype: 'Currency',\n                        label: 'Payment Total',\n                        default: d_total,\n                        read_only: true\n                    },\n                ],\n                primary_action_label: 'Submit',\n                primary_action(values) {\n                    console.log(values)\n                        frappe.call({\n                            method: 'create-sending-money',\n                            args: {\n                                payment_total: values.payment_total,\n                                date: values.date,\n                                items: JSON.stringify(values.delivery_order.map((note, index) => {\n                                    const ob = {\n                                        delivery_order: values.delivery_order[index].name,\n                                        recipient_name: values.delivery_order[index].recipient,\n                                        bill_amount: values.delivery_order[index].grand_total,\n                                        remaining_amount: values.delivery_order[index].remaining_amount,\n                                        received_amount: values.delivery_order[index].received_amount,\n                                    }\n                                    console.log(ob)\n                                    return ob\n                                }))\n                            },\n                            callback: function(response) {\n                                console.log(response.message, 'response');\n                                frappe.set_route(['Form', 'Money Send Record', response.message])\n                            }\n                        })\n        show_alert('Send Money !')\n        \n                    dialog.hide();\n                    console.log(listview)\n                }\n            })\n\n            dialog.show()\n        });\n\n\n        // listview.page.add_action_item(__('Create Delivery Trip (Use this one)'), () => {\n        //     let selected_docs_no_filter = listview.get_checked_items()\n        //         frappe.new_doc(\"Delivery Trip\", {tracking_state: \"Arrived\"});\n        // });\n    },\n    get_indicator(doc) {\n        if (doc.status == 'Failed') {\n            return [__(\"Failed\"), \"orange\", \"status,=,Failed\"];\n        } else if(doc.status == 'Completed') {\n            return [__(\"Completed\"), \"green\", \"status,=,Completed\"];\n        } else if(doc.status == 'Submitted') {\n            return [__(\"Submitted\"), \"blue\", \"status,=,Submitted\"];\n        } else {\n            return [__(doc.status), \"red\", `status,=,${doc.status}`];\n        }\n    },\n    button:{\n        show: function(doc) {\n            var canEdit = frappe.user_roles.indexOf('Delivery Price Manager') >= 0\n            // var canEdit = true\n            if(canEdit){\n                return true\n            }else{\n                return false\n            }\n        },\n        get_label: function() {\n            return __('Edit');\n        },\n        get_description: function(doc) {\n            return __('Edit {0}', [doc.name])\n        },\n        action: function(doc) {\n            console.log(doc.name)\n            frappe.db.get_list('Delivery Order Item', {\n                filters: {\n                parent: doc.name,\n            },\n            parent_doctype: 'Delivery Order',\n            fields: ['parent', 'item_code', 'item_name', 'qty', 'uom', 'rate', 'amount', 'name']\n            }).then(e => {\n            let items = e\n        let d = new frappe.ui.Dialog({\n            title: 'Edit Delivery Order',\n            fields: [\n                {\n                    label: 'Delivery Order',\n                    fieldname: 'delivery_order',\n                    fieldtype: 'Link',\n                    options: 'Delivery Order',\n                    reqd: 1,\n                    default: doc.name,\n                    read_only: 1\n                },\n                {\n                        label: 'Items',\n                        fieldname: 'items',\n                        fieldtype: 'Table',\n                        data: items,\n                        get_data: () => {\n\t\t\t\t\treturn items;\n\t\t\t\t},\n                        fields: [\n                            {\n                                fieldname: 'name',\n                                fieldtype: 'Data',\n                                in_list_view: 0,\n                                label: 'ID',\n                                read_only: 1,\n                            },\n                            {\n                                fieldname: 'item_code',\n                                fieldtype: 'Link',\n                                in_list_view: 1,\n                                label: 'Item Code',\n                                read_only: 1,\n                                options: 'TMS Item',\n                                onchange: function(event) {\n                                    let child_table = d.get_value('items');\n                                    for(let i = 0; i < child_table.length; i++){\n                                        const item_code = child_table[i].item_code\n                                        child_table[i].amount = child_table[i].qty * child_table[i].rate\n                                    }\n\t\t\t                       d.fields_dict.items.grid.refresh()\n\t\t\t                       \n\t\t                        }\n                            },\n                            {\n                                fieldname: 'item_name',\n                                fieldtype: 'Data',\n                                in_list_view: 2,\n                                label: 'Item Name',\n                                read_only: 1,\n                                reqd: 1,\n                            },\n                            {\n                                fieldname: 'qty',\n                                fieldtype: 'Float',\n                                in_list_view: 1,\n                                label: 'Qty',\n                                default: 1,\n                                onchange: function(event) {\n                                    let child_table = d.get_value('items');\n                                    for(let i = 0; i < child_table.length; i++){\n                                        const item_code = child_table[i].item_code\n                                        child_table[i].amount = child_table[i].qty * child_table[i].rate\n                                    }\n\t\t\t                       d.fields_dict.items.grid.refresh()\n\t\t\t                       \n\t\t                        }\n                            },\n                            {\n                                fieldname: 'uom',\n                                fieldtype: 'Link',\n                                in_list_view: 1,\n                                label: 'UOM',\n                                options: 'UOM',\n                                default: 'Unit',\n                                onchange: function(event) {\n                                    let child_table = d.get_value('items');\n                                    for(let i = 0; i < child_table.length; i++){\n                                        const item_code = child_table[i].item_code\n                                        child_table[i].amount = child_table[i].qty * child_table[i].rate\n                                    }\n\t\t\t                       d.fields_dict.items.grid.refresh()\n\t\t\t                       \n\t\t                        }\n                            },\n                            {\n                                fieldname: 'rate',\n                                fieldtype: 'Float',\n                                in_list_view: 1,\n                                label: 'Rate',\n                                onchange: function(event) {\n                                    let child_table = d.get_value('items');\n                                    for(let i = 0; i < child_table.length; i++){\n                                        const item_code = child_table[i].item_code\n                                        child_table[i].amount = child_table[i].qty * child_table[i].rate\n                                    }\n\t\t\t                       d.fields_dict.items.grid.refresh()\n\t\t\t                       \n\t\t                        }\n                            },\n                            {\n                                fieldname: 'amount',\n                                fieldtype: 'Currency',\n                                in_list_view: 1,\n                                label: 'Amount',\n                                read_only: true,\n                                onchange: function(event) {\n                                    let child_table = d.get_value('items');\n                                    for(let i = 0; i < child_table.length; i++){\n                                        const item_code = child_table[i].item_code\n                                        child_table[i].amount = child_table[i].qty * child_table[i].rate\n                                    }\n\t\t\t                       d.fields_dict.items.grid.refresh()\n\t\t\t                       \n\t\t                        }\n                            },\n                        ]\n                    }\n            ],\n            primary_action_label: 'Edit',\n            primary_action(values) {\n                console.log(values)\n                const items = values.items\n                frappe.call({\n                    method: 'edit-delivery-order-items',\n                    args: {\n                        ...values,\n                        items: items\n                    },\n                    callback: function(response) {\n                        console.log(response.message);\n                        frappe.show_alert(response.message)\n                        cur_list.refresh()\n                    }\n                })\n\n                d.hide();\n            }\n        });\n        d.show()\n            })\n        }\n    }\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Order Transfer",
  "enabled": 1,
  "modified": "2023-06-29 05:29:20.169273",
  "module": null,
  "name": "delivery-order-transfer-custom-button",
  "script": "function setCreatePurchaseInvoiceButton(frm) {\n    if (frm.doc.docstatus != 1) {\n        return false\n    }\n    frm.add_custom_button(__(\"Purchase Invoice\"), async () => {\n        // const user_setting = await getDoc('TMS User Setting', `${frm.doc.owner} - ${frm.doc.abbr}`)\n        // const company = await getDoc('Company', `${frm.doc.company}`)\n        frappe.new_doc('Purchase Invoice', {\n            'supplier': cur_frm.doc.transporter,\n            tms_reference_type: 'Delivery Order Transfer',\n            ref_delivery_order_transfer: cur_frm.doc.name,\n            company: cur_frm.doc.company\n        })\n    }, __(\"Create\"))\n}\n\nfunction setAddOrderButton(frm) {\n    frm.add_custom_button(__(\"Delivery Order\"), async () => {\n        if (frm.doc.driver != null && frm.doc.vehicle != null && frm.doc.target_warehouse != null && frm.doc.departure_date_time != null) {\n\n        } else {\n            frappe.msgprint(__('Please filled mandotary fields'));\n            return false\n        }\n        let items = []\n        await frappe.db.get_list('Delivery Order Transfer Item', {\n            fields: ['name', 'delivery_order', 'docstatus'], \n            parent_doctype:\"Delivery Order Transfer\"\n        }).then(e => {\n            items = e.map(trip_item => trip_item.delivery_order)\n            console.log(e)\n        })\n        if (frm.doc.items) {\n            frm.doc.items.forEach(i => {\n                items.push(i.delivery_order)\n            })\n        }\n\n        new frappe.ui.form.MultiSelectDialog({\n            doctype: \"Delivery Order\",\n            target: cur_frm,\n            setters: {\n                \"posting_date\": null,\n                \"sender_id\": null,\n                \"source_warehouse\": null,\n                \"recipient_id\": null,\n                \"recipient_county\": null,\n                \"recipient_province\": null,\n                \"delivery_type\": 'Express',\n                \"hand_bill_no\": null,\n            },\n            add_filters_group: 1,\n            date_field: \"posting_date\",\n            get_query() {\n                return {\n                    filters: {\n                        docstatus: ['=', 1],\n                        name: ['not in', items],\n                        company: ['=', frm.doc.company]\n                    },\n                }\n            },\n            action: (selections, args) => {\n                const delivery_notes = frappe.db.get_list('Delivery Order', {\n                    filters: {\n                        name: ['in', selections]\n                    },\n                    fields: ['name','sender_id', 'posting_date', \"source_warehouse\", \"recipient\", \"recipient_id\", \"recipient_county\", \"recipient_province\", \"grand_total\", \"grand_total_qty\", \"grand_total_weight\", \"grand_total_volume\", \"cash_on\", \"sender\", \"hand_bill_no\", \"recipient_in_line_address\", 'money_received_amount']\n                }).then(\n                    e => {\n                        e.map(note => {\n                            frm.add_child('items', {\n                                delivery_order: note.name,\n                        posting_date: note.posting_date,\n                        source_warehouse: note.source_warehouse,\n                        sender: note.sender_id,\n                        recipient: note.recipient_id,\n                        recipient_in_line_address: note.recipient_in_line_address,\n                        hand_bill_no: note.hand_bill_no,\n                        recipient_county: note.recipient_county,\n                        recipient_province: note.recipient_province,\n                        grand_total: note.grand_total,\n                        grand_total_qty: note.grand_total_qty,\n                        grand_total_weight: note.grand_total_weight,\n                        grand_total_volume: note.grand_total_volume,\n                        cash_on: note.cash_on,\n                            })\n                        })\n                        frm.refresh()\n                        frm.save()\n                        $('.modal').modal('hide');\n                    })\n\n            }\n        })\n\n    }, __(\"Add\"))\n}\n\nfunction setViewOrderButton(frm) {\n    frm.add_custom_button(__(\"View Delivery Order List\"), async () => {\n        let items = []\n        // await frappe.db.get_list('Delivery Order Transfer Item',{\n        //             fields: ['name', 'delivery_order', 'docstatus']\n        //         }).then(e => {\n        //             items = e.map(trip_item => trip_item.delivery_order)\n        //             console.log(e)\n        //         })\n        frappe.set_route(\"List\", \"Delivery Order\", {\n            \"tr_no\": frm.doc.name\n        });\n\n    }, __(\"Views\"))\n    frm.add_custom_button(__(\"View Delivery Order Report\"), async () => {\n        let items = []\n        // await frappe.db.get_list('Delivery Order Transfer Item',{\n        //             fields: ['name', 'delivery_order', 'docstatus']\n        //         }).then(e => {\n        //             items = e.map(trip_item => trip_item.delivery_order)\n        //             console.log(e)\n        //         })\n        frappe.set_route(\"Report\", \"Delivery Order\", {\n            \"tr_no\": frm.doc.name\n        });\n\n    }, __(\"Views\"))\n}\n\n\n\nfrappe.ui.form.on('Delivery Order Transfer', {\n    onload(frm) {\n        frm.get_field(\"items\").grid.cannot_add_rows = true;\n    },\n    refresh(frm) {\n        if (frm.doc.docstatus == 0) {\n            setAddOrderButton(frm)\n        }\n\n        if (frm.doc.docstatus == 1) {\n            setAddOrderButton(frm)\n            setViewOrderButton(frm)\n            setCreatePurchaseInvoiceButton(frm)\n        }\n    },\n})\n\nfrappe.ui.form.on('Delivery Order Transfer Item', {\n    items_add(frm) {\n        // frm.save()\n    },\n    items_remove(frm) {\n        frm.save()\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Order Trip",
  "enabled": 1,
  "modified": "2023-06-29 05:29:22.434006",
  "module": null,
  "name": "delivery-order-trip-custom-button",
  "script": "function setCreatePurchaseInvoiceButton(frm){\n    if(frm.doc.docstatus != 1){\n        return false\n    }\n    frm.add_custom_button(__(\"Purchase Invoice\"), async () => {\n        // const user_setting = await getDoc('TMS User Setting', `${frm.doc.owner} - ${frm.doc.abbr}`)\n        // const company = await getDoc('Company', `${frm.doc.company}`)\n        frappe.new_doc('Purchase Invoice', {\n            'supplier': frm.doc.transporter,\n            tms_reference_type: 'Delivery Order Trip',\n            ref_tms_expense: frm.doc.name\n        })\n        },__(\"Create\"))\n}\n\nfunction setAddOrderButton(frm){\n    frm.add_custom_button(__(\"Delivery Order\"), async () => {\n            let items = []\n            await frappe.db.get_list('Delivery Order Trip Item',{\n                        fields: ['name', 'delivery_order', 'docstatus'], \n                        parent_doctype:\"Delivery Order Trip\"\n                    }).then(e => {\n                        items = e.map(trip_item => trip_item.delivery_order)\n                        console.log(e)\n                    })\n                    \n            new frappe.ui.form.MultiSelectDialog({\n                doctype: \"Delivery Order\",\n                target: cur_frm,\n                setters: {\n                    \"posting_date\": null,\n                    \"source_warehouse\": null,\n                    \"sender_id\": null,\n                    \"recipient_id\": null,\n                    \"recipient_county\": null,\n                    \"recipient_province\": null,\n                    \"delivery_type\": 'Express',\n                    \"hand_bill_no\": null,\n                },\n                add_filters_group: 1,\n                date_field: \"posting_date\",\n                // allow_child_item_selection: 1,\n                // child_fieldname: \"items\", // child table fieldname, whose records will be shown &amp; can be filtered\n                // child_columns: [\"item_code\", \"qty\", \"uom\", \"rate\", \"amount\"],\n                get_query() {\n                    return {\n                        filters: {\n                            docstatus: ['=', 1],\n                            name: ['not in', items],\n                            company: ['=', frm.doc.company]\n                        },\n                    }\n                },\n                action: (selections, args) => {\n                    const delivery_notes = frappe.db.get_list('Delivery Order',{\n                        filters: {\n                            name: ['in', selections]\n                        },\n                        fields: ['name', 'posting_date','sender_id', \"source_warehouse\", \"recipient\", \"recipient_id\", \"recipient_county\", \"recipient_province\", \"grand_total\", \"grand_total_qty\", \"grand_total_weight\", \"grand_total_volume\", \"cash_on\", \"sender\", \"hand_bill_no\", \"recipient_in_line_address\"]\n                    }).then(\n                        e => {\n                            e.map(note => {\n                        frm.add_child('items', {\n                        delivery_order: note.name,\n                        posting_date: note.posting_date,\n                        source_warehouse: note.source_warehouse,\n                        sender: note.sender_id,\n                        recipient: note.recipient_id,\n                        recipient_in_line_address: note.recipient_in_line_address,\n                        hand_bill_no: note.hand_bill_no,\n                        recipient_county: note.recipient_county,\n                        recipient_province: note.recipient_province,\n                        grand_total: note.grand_total,\n                        grand_total_qty: note.grand_total_qty,\n                        grand_total_weight: note.grand_total_weight,\n                        grand_total_volume: note.grand_total_volume,\n                        cash_on: note.cash_on,\n                    })\n                        })\n                     frm.refresh()\n                    frm.save()\n                    $('.modal').modal('hide');\n                    })\n                   \n                }\n            })\n            \n        },__(\"Add\"))\n}\n\nfunction setViewOrderButton(frm){\n    frm.add_custom_button(__(\"Delivery Order\"), async () => {\n            let items = []\n            await frappe.db.get_list('Delivery Order Trip Item',{\n                        fields: ['name', 'delivery_order', 'docstatus'], \n                        parent_doctype:\"Delivery Order Trip\"\n                    }).then(e => {\n                        items = e.map(trip_item => trip_item.delivery_order)\n                        console.log(e)\n                    })\n                    frappe.set_route(\"List\", \"Delivery Order\", {\"dr_no\": frm.doc.name});\n            \n        },__(\"View\"))\n}\n\n\n\nfrappe.ui.form.on('Delivery Order Trip', {\n    onload(frm) {\n        frm.get_field(\"items\").grid.cannot_add_rows = true;\n    },\n    refresh(frm){\n        if(frm.doc.docstatus == 0){\n            setAddOrderButton(frm)\n        }\n        if(frm.doc.docstatus == 1){\n            setAddOrderButton(frm)\n            setCreatePurchaseInvoiceButton(frm)\n            setViewOrderButton(frm)\n        }\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Money Send Record",
  "enabled": 1,
  "modified": "2023-06-14 03:53:00.405054",
  "module": null,
  "name": "money-send-record-listview",
  "script": "const t = frappe.listview_settings['Money Send Record']\n\nfrappe.listview_settings['Money Send Record'] = {\n    ...t,\n    get_indicator(doc) {\n        // customize indicator color\n        if (doc.status == 'To Bill') {\n            return [__(\"To Bill\"), \"green\", \"status,=,To Bill\"];\n        }\n        else if (doc.status == 'Draft') {\n            return [__(\"Draft\"), \"red\", \"status,=,Draft\"];\n        }\n        else if (doc.status == 'Billed') {\n            return [__(\"Billed\"), \"grey\", \"status,=,Billed\"];\n        }else {\n            return [__(doc.status), \"red\", `status,=,${doc.status}`];\n        }\n    },\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Money Send Record",
  "enabled": 1,
  "modified": "2023-07-04 23:09:01.983072",
  "module": null,
  "name": "money-send-record-form",
  "script": "function calculateTotal(frm){\n    let total = 0\n    frm.doc.items.map(item => {\n        total += item.received_amount\n    })\n    frm.doc.total_received_amount = total\n    frm.doc.payment_total = total\n    frm.refresh()\n}\n\nasync function getDoc(type, name){\n    try{\n        const task = await frappe.call({\n        method: \"frappe.client.get\",\n        args: {\n            doctype: type,\n            name: name,\n        },\n        callback(r) {\n            if(r.message) {\n                return r.message\n            }\n        }\n    });\n    return task.message\n    }catch(e){\n        return null\n    }\n}\n\nfunction setAddOrderButton(frm){\n    frm.add_custom_button(__(\"Delivery Order\"), () => {\n            frm.refresh()\n        let items = []\n            if(frm.doc.items){\n                frm.doc.items.forEach(i => {\n                items.push(i.delivery_order)\n            })\n            }\n                    \n            new frappe.ui.form.MultiSelectDialog({\n                doctype: \"Delivery Order\",\n                target: cur_frm,\n                setters: {\n                    \"posting_date\": null,\n                    \"source_warehouse\": null,\n                    \"recipient_county\": null,\n                    \"recipient_province\": null,\n                    \"delivery_type\": null,\n                    \"cash_on\": null,\n                },\n                add_filters_group: 1,\n                date_field: \"posting_date\",\n                get_query() {\n                    return {\n                        filters: {\n                            docstatus: ['=', 1],\n                            name: ['not in', items],\n                            company: ['=', cur_frm.doc.company],\n                            sending_money_status: ['=', 'Open'],\n                        },\n                    }\n                },\n                action: (selections, args) => {\n                    const delivery_notes = frappe.db.get_list('Delivery Order',{\n                        filters: {\n                            name: ['in', selections]\n                        },\n                        fields: ['name', 'posting_date', \"source_warehouse\", \"recipient\", \"recipient_county\", \"recipient_province\", \"grand_total\", \"cash_on\", \"sender\", \"hand_bill_no\", \"recipient_in_line_address\", 'money_received_amount', 'commission']\n                    }).then(\n                        e => {\n                            e.map(note => {\n                        const remaining = note.grand_total - note.money_received_amount - note.commission\n                        frm.add_child('items', {\n                        delivery_order: note.name,\n                        recipient_name: note.recipient,\n                        grand_total: note.grand_total,\n                        remaining_amount: remaining,\n                        received_amount: remaining\n                    })\n                        })\n                    // frm.save()\n                    calculateTotal(frm)\n                    $('.modal').modal('hide');\n                    })\n                   \n                }\n            })\n            \n        },__(\"Add\"))\n}\n\n\nfunction setBankTansactionButton(frm){\n    if(frm.doc.docstatus != 1){\n        return false\n    }\n    frm.add_custom_button(__(\"Sales Invoice\"), async () => {\n        const payment_options = {\n            payment_type: 'Receive',\n            party_type: 'Employee',\n            party: frm.doc.employee,\n            mode_of_payment: 'Cash',\n            party_name: frm.doc.employee_name,\n            paid_amount: frm.doc.outstanding_amount,\n            received_amount: 0,\n            company: frm.doc.company,\n            reference_doctype: 'Money Send Record',\n            reference_docname: frm.doc.name\n        }\n        // console.log(frm)\n        await getDoc('TMS User Setting', `${frm.doc.owner} - ${frm.doc.abbr}`).then(user_setting => {\n                if(user_setting){\n                    console.log(user_setting)\n             frappe.new_doc('Sales Invoice', {\n            'customer': user_setting?.customer || null,\n            tms_reference_type: 'Money Send Record',\n            money_send_record: cur_frm.doc.name,\n            company: cur_frm.doc.company\n            })   \n            }\n            })\n        \n        },__(\"Create\"))\n}\n\nfrappe.ui.form.on('Money Send Record', {\n    onload(frm){\n        frm.get_field(\"items\").grid.cannot_add_rows = true;\n    },\n    refresh(frm){\n        \n        if(frm.doc.docstatus == 1){\n            setBankTansactionButton(frm)\n            // setViewOrderButton(frm)\n        }\n        if(frm.doc.docstatus == 0){\n            setAddOrderButton(frm)\n            // setViewOrderButton(frm)\n        }\n    },\n})\n\nfrappe.ui.form.on('Money Send Record Item', {\n    received_amount(frm){\n      calculateTotal(frm)  \n    },\n    items_add(frm){\n        calculateTotal(frm)\n    },\n    items_remove(frm){\n        calculateTotal(frm)\n    }\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Order",
  "enabled": 0,
  "modified": "2023-06-29 05:34:36.562594",
  "module": null,
  "name": "delivery-order-fetch-rate",
  "script": "function getRate(frm){\n    let items = frm.doc.items\n    items.forEach(item => {\n        \n    })\n    console.log(items)\n}\n\nfrappe.ui.form.on('Delivery Order', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tcash_on(frm){\n\t    getRate(frm)\n\t}\n})\n\nfrappe.ui.form.on('Delivery Order Item', {\n\trefresh(frm) {\n\t\t// your code here\n\t},\n\tuom(frm, cdt, cdn){\n\t    console.log(cdn)\n\t    const item = frappe.get_doc('Delivery Order Item', cdn)\n\t    const filter_options = {\n\t            sender_id: frm.doc.sender_id,\n\t            recipient_id: frm.doc.recipient_id,\n\t            cash_on: frm.doc.cash_on,\n\t            item: item?.item_code,\n\t            uom: item?.uom\n\t        }\n\t    frappe.db.get_list('TMS Price List', {\n\t        filters: filter_options,\n\t        page_length: 1,\n\t        fields: ['rate', 'name']\n\t    }).then(list => {\n\t        item.rate = list[0]?.rate || 0\n\t        console.log(list[0])\n\t        frm.refresh()\n\t    })\n\t    \n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "TMS Payment Entry",
  "enabled": 1,
  "modified": "2023-06-12 01:38:28.108696",
  "module": null,
  "name": "tms-payment-entry-set-query",
  "script": "// function setPartyQuery(frm){\n//     if(frm.doc.payment_type == 'Receive'){\n//         frm.set_query(\"party\", function() {\n//         return {\n//             \"filters\": {\n//                 \"name\": ['in', ['Employee', 'TMS Customer']],\n//             }\n//         };\n//     });\n//     }\n// }\n\nfunction setPartyQuery(frm){\n    console.log(frm)\n    if(frm.doc.payment_type == 'Receive'){\n        frm.set_query(\"party_type\", function() {\n        return {\n            \"filters\": {\n                \"name\": ['in', ['Employee', 'TMS Customer']],\n            }\n        };\n    });\n    }\n    else if(frm.doc.payment_type == 'Pay'){\n        frm.set_query(\"party_type\", function() {\n        return {\n            \"filters\": {\n                \"name\": ['in', ['Employee', 'Supplier']],\n            }\n        };\n    });\n    }\n    else{\n        frm.set_query(\"party_type\", function() {\n        return {\n            \"filters\": {\n                \"name\": ['in', ['']],\n            }\n        };\n    });\n    }\n}\n\nfrappe.ui.form.on('TMS Payment Entry', {\n\trefresh(frm) {\n\t\tsetPartyQuery(frm)\n\t},\n\tpayment_type(frm){\n\t    setPartyQuery(frm)\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Sales Invoice",
  "enabled": 1,
  "modified": "2023-06-12 04:35:12.065040",
  "module": null,
  "name": "sales-invoice-tms-setting",
  "script": "frappe.ui.form.on('Sales Invoice', {\n\trefresh(frm) {\n\t\tfrm.set_query('tms_reference_doctype', () => {\n\t\t    return {\n\t\t        filters: {\n\t\t            name: ['in', ['Money Send Record']]\n\t\t        }\n\t\t    }\n\t\t})\n\t\tfrm.set_query('tms_reference_docname', () => {\n\t\t    return {\n\t\t        filters: {\n\t\t            docstatus: 1\n\t\t        }\n\t\t    }\n\t\t})\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "TMS Expense",
  "enabled": 1,
  "modified": "2023-07-05 00:46:21.638238",
  "module": null,
  "name": "tms-expense-form",
  "script": "async function getDoc(type, name){\n    try{\n        const task = await frappe.call({\n        method: \"frappe.client.get\",\n        args: {\n            doctype: type,\n            name: name,\n        },\n        callback(r) {\n            if(r.message) {\n                var task = r.message;\n                return task.message || null\n            }\n        }\n    })\n    }catch(e){\n        return null\n    }\n}\n\nfunction setCreatePurchaseInvoiceButton(frm){\n    if(frm.doc.docstatus != 1){\n        return false\n    }\n    frm.add_custom_button(__(\"Purchase Invoice\"), async () => {\n        // const user_setting = await getDoc('TMS User Setting', `${frm.doc.owner} - ${frm.doc.abbr}`)\n        // const company = await getDoc('Company', `${frm.doc.company}`)\n        frappe.new_doc('Purchase Invoice', {\n            'supplier': frm.doc.supplier,\n            tms_reference_type: 'TMS Expense',\n            ref_tms_expense: frm.doc.name\n        })\n        },__(\"Create\"))\n}\n\nfunction calculateChild(frm, cdt, cdn){\n    let total = 0\n    frm.doc.items.map(item => {\n        const amount = item.qty * item.rate\n        total += amount\n        item.amount = amount\n    })\n    frm.doc.payment_total = total\n    frm.refresh()\n    return total\n}\n\nfrappe.ui.form.on('TMS Expense', {\n\trefresh(frm) {\n    console.log(frm)\n\t\tsetCreatePurchaseInvoiceButton(frm)\n\t}\n})\n\nfrappe.ui.form.on('TMS Expense Item Table', {\n\trefresh(frm) {\n\t\t// your code here\n\t\tconsole.log(frm)\n\t},\n\trate(frm, cdt, cdn){\n\t   calculateChild(frm, cdt, cdn)\n\t},\n\tqty(frm, cdt, cdn){\n\t   calculateChild(frm, cdt, cdn)\n\t},\n\tamount(frm, cdt, cdn){\n\t    calculateChild(frm, cdt, cdn)\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "TMS Expense",
  "enabled": 1,
  "modified": "2023-07-04 23:11:48.991472",
  "module": null,
  "name": "tms-expense-listview",
  "script": "const t = frappe.listview_settings['TMS Expense']\n\nfrappe.listview_settings['TMS Expense'] = {\n    ...t,\n    get_indicator(doc) {\n        // customize indicator color\n        if (doc.status == 'To Bill') {\n            return [__(\"To Bill\"), \"green\", \"status,=,To Bill\"];\n        }\n        else if (doc.status == 'Draft') {\n            return [__(\"Draft\"), \"red\", \"status,=,Draft\"];\n        }\n        else if (doc.status == 'Billed') {\n            return [__(\"Billed\"), \"grey\", \"status,=,Billed\"];\n        }else {\n            return [__(doc.status), \"red\", `status,=,${doc.status}`];\n        }\n    },\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Order Trip",
  "enabled": 1,
  "modified": "2023-06-14 03:52:40.729469",
  "module": null,
  "name": "delivery-order-trip-list-view",
  "script": "const t = frappe.listview_settings['Delivery Order Trip']\n\nfrappe.listview_settings['Delivery Order Trip'] = {\n    ...t,\n    get_indicator(doc) {\n        // customize indicator color\n        if (doc.status == 'To Bill') {\n            return [__(\"To Bill\"), \"green\", \"status,=,To Bill\"];\n        }\n        else if (doc.status == 'Draft') {\n            return [__(\"Draft\"), \"red\", \"status,=,Draft\"];\n        }\n        else if (doc.status == 'Billed') {\n            return [__(\"Billed\"), \"grey\", \"status,=,Billed\"];\n        }else {\n            return [__(doc.status), \"red\", `status,=,${doc.status}`];\n        }\n    },\n}",
  "view": "List"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Delivery Order Transfer",
  "enabled": 1,
  "modified": "2023-06-14 03:52:10.797480",
  "module": null,
  "name": "delivery-order-transfer-listview",
  "script": "const t = frappe.listview_settings['Delivery Order Transfer']\n\nfrappe.listview_settings['Delivery Order Transfer'] = {\n    ...t,\n    get_indicator(doc) {\n        // customize indicator color\n        if (doc.status == 'To Bill') {\n            return [__(\"To Bill\"), \"green\", \"status,=,To Bill\"];\n        }\n        else if (doc.status == 'Draft') {\n            return [__(\"Draft\"), \"red\", \"status,=,Draft\"];\n        }\n        else if (doc.status == 'Billed') {\n            return [__(\"Billed\"), \"grey\", \"status,=,Billed\"];\n        }else {\n            return [__(doc.status), \"red\", `status,=,${doc.status}`];\n        }\n    },\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Receipt",
  "enabled": 1,
  "modified": "2023-07-02 13:38:58.840718",
  "module": null,
  "name": "receipt-form",
  "script": "async function getDoc(type, name){\n    try{\n        const task = await frappe.call({\n        method: \"frappe.client.get\",\n        args: {\n            doctype: type,\n            name: name,\n        },\n        callback(r) {\n            if(r.message) {\n                var task = r.message;\n                return task.message || null\n            }\n        }\n    })\n    }catch(e){\n        return null\n    }\n}\n\nfunction setCreatePurchaseInvoiceButton(frm){\n    if(frm.doc.docstatus != 1){\n        return false\n    }\n    frm.add_custom_button(__(\"Purchase Invoice\"), async () => {\n        // const user_setting = await getDoc('TMS User Setting', `${frm.doc.owner} - ${frm.doc.abbr}`)\n        // const company = await getDoc('Company', `${frm.doc.company}`)\n        frappe.new_doc('Purchase Invoice', {\n            'supplier': null,\n            tms_reference_type: 'Receipt',\n            ref_receipt: frm.doc.name\n        })\n        },__(\"Create\"))\n}\n\nfunction calculate(frm){\n    let total = 0\n    cur_frm.doc.items.map(item => {\n        const amount = item.rate * item.qty\n        total += amount\n        item.amount = amount\n    })\n    cur_frm.doc.grand_total = total\n    cur_frm.refresh()\n}\n\nfunction setQuery(frm){\n    frm.set_query(\"company_id\", function() {\n        return {\n            \"filters\": {\n                is_company_address: 1,\n                // company: cur_frm.doc.company\n            }\n        };\n    });\n    // frm.set_query(\"customer\", function() {\n    //     return {\n    //         \"filters\": {\n    //             is_company_address: 0,\n    //         }\n    //     };\n    // });\n}\n\n\nfrappe.ui.form.on('Receipt', {\n\trefresh(frm) {\n\t    console.log(frm)\n\t    setCreatePurchaseInvoiceButton(frm)\n\t},\n\tcompany(frm){\n\t    setQuery(frm)\n\t},\n\tcustomer_type(frm){\n\t    frm.doc.customer = null\n\t    frm.refresh()\n\t}\n})\n\nfrappe.ui.form.on('Delivery Order Item', {\n\trate(frm) {\n\t\tcalculate(frm)\n\t},\n\tqty(frm){\n\t    calculate(frm)\n\t},\n\titem_name(frm){\n\t    calculate(frm)\n\t},\n\titem_code(frm){\n\t    calculate(frm)\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "TMS Recipient",
  "enabled": 1,
  "modified": "2023-06-20 08:14:51.087097",
  "module": null,
  "name": "tms-recipient-form",
  "script": "function setDf(frm){\n    if(frm.doc.state == undefined){\n            frm.set_df_property('county', 'read_only', 1)\n            frm.set_df_property('city', 'read_only', 1)\n        }else if(frm.doc.county == undefined){\n            frm.set_df_property('county', 'read_only', 0)\n            frm.set_df_property('city', 'read_only', 1)\n        }else{\n            frm.set_df_property('county', 'read_only', 0)\n            frm.set_df_property('city', 'read_only', 0)\n        }\n}\n\nfunction setOptions(frm){\n    frappe.db.get_list('County', {\n            filters: {\n                province: frm.doc.state\n            },\n            limit: 500,\n            fields: [\"title\"]\n        }).then(counties => {\n            const array = counties.map(e => e.title)\n            set_field_options(\"county\", array)\n            frappe.db.get_list('City', {\n            filters: {\n                county: frm.doc.county\n            },\n            limit: 500,\n            fields: [\"title\"]\n        }).then(counties => {\n            const array = counties.map(e => e.title)\n            set_field_options(\"city\", array)\n        })\n        })\n}\n\n\nfrappe.ui.form.on('TMS Recipient', {\n    refresh(frm){\n        setOptions(frm)\n        setQuery(frm)\n    },\n\tstate(frm) {\n\t    set_field_options(\"county\", [])\n\t    frm.set_value('county', null)\n\t    frm.set_value('city', null)\n\t    setOptions(frm)\n// \tfrm.set_query(\"county\", function() {\n//         return {\n//             \"filters\": {\n//                 \"province\": frm.doc.state,\n//             }\n//         };\n//     });\n\t},\n\tcounty(frm) {\n\t    set_field_options(\"city\", [])\n\t    frm.set_value('city', null)\n\t    setOptions(frm)\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Receipt",
  "enabled": 0,
  "modified": "2023-07-02 13:36:59.192711",
  "module": null,
  "name": "receipt-listview",
  "script": "const t = frappe.listview_settings['Receipt']\n\nfrappe.listview_settings['Receipt'] = {\n    ...t,\n    get_indicator(doc) {\n        // customize indicator color\n        if (doc.status == 'To Bill') {\n            return [__(\"To Bill\"), \"green\", \"status,=,To Bill\"];\n        }\n        else if (doc.status == 'Draft') {\n            return [__(\"Draft\"), \"red\", \"status,=,Draft\"];\n        }\n        else if (doc.status == 'Billed') {\n            return [__(\"Billed\"), \"grey\", \"status,=,Billed\"];\n        }else {\n            return [__(doc.status), \"red\", `status,=,${doc.status}`];\n        }\n    },\n}",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Tax Withholding",
  "enabled": 1,
  "modified": "2023-06-28 18:52:16.920973",
  "module": null,
  "name": "tax-withholding-form",
  "script": "frappe.ui.form.on('Tax Withholding', {\n    refresh(frm){\n      frm.set_query(\"employee\", function() {\n        return {\n            \"filters\": {\n                \"is_company_address\": true\n            }\n        };\n    });  \n    },\n\tgrand_total(frm) {\n\t\t// your code here\n\t\tfrm.doc.tax_charge = frm.doc.grand_total * (1/100)\n\t\tfrm.refresh()\n\t}\n})",
  "view": "Form"
 },
 {
  "docstatus": 0,
  "doctype": "Client Script",
  "dt": "Tax Customer",
  "enabled": 1,
  "modified": "2023-07-02 14:14:46.188840",
  "module": null,
  "name": "tax-customer-form",
  "script": "function setDf(frm){\n    if(frm.doc.state == undefined){\n            frm.set_df_property('county', 'read_only', 1)\n            frm.set_df_property('city', 'read_only', 1)\n        }else if(frm.doc.county == undefined){\n            frm.set_df_property('county', 'read_only', 0)\n            frm.set_df_property('city', 'read_only', 1)\n        }else{\n            frm.set_df_property('county', 'read_only', 0)\n            frm.set_df_property('city', 'read_only', 0)\n        }\n}\n\nfunction setOptions(frm){\n    frappe.db.get_list('County', {\n            filters: {\n                province: frm.doc.state\n            },\n            limit: 500,\n            fields: [\"title\"]\n        }).then(counties => {\n            const array = counties.map(e => e.title)\n            set_field_options(\"county\", array)\n            frappe.db.get_list('City', {\n            filters: {\n                county: frm.doc.county\n            },\n            limit: 500,\n            fields: [\"title\"]\n        }).then(counties => {\n            const array = counties.map(e => e.title)\n            set_field_options(\"city\", array)\n        })\n        })\n}\n\n\nfrappe.ui.form.on('Tax Customer', {\n    refresh(frm){\n        console.log(frm)\n        setOptions(frm)\n        setDf(frm)\n    },\n\tstate(frm) {\n\t    set_field_options(\"county\", [])\n\t    frm.set_value('county', null)\n\t    frm.set_value('city', null)\n\t    setOptions(frm)\n// \tfrm.set_query(\"county\", function() {\n//         return {\n//             \"filters\": {\n//                 \"province\": frm.doc.state,\n//             }\n//         };\n//     });\n\t},\n\tcounty(frm) {\n\t    set_field_options(\"city\", [])\n\t    frm.set_value('city', null)\n\t    setOptions(frm)\n\t}\n})",
  "view": "Form"
 }
]